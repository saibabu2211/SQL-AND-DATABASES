

## üß© MySQL Subqueries ‚Äî From Scratch to Advanced

### ‚úÖ What is a Subquery?

A **subquery** is a query nested inside another SQL statement. It returns data used by the outer query ‚Äî like a temporary result set.

---

### üìå 1. Basic Subquery in `WHERE`

```sql
SELECT name, salary
FROM employees
WHERE salary > (
  SELECT AVG(salary) FROM employees
);
```

‚úÖ **Use Case:** Find employees earning above average.

---

### üìå 2. Subquery in `SELECT`

```sql
SELECT 
  name,
  (SELECT dept_name FROM departments WHERE dept_id = e.dept_id) AS department
FROM employees e;
```

‚úÖ **Use Case:** Add related info without a join.

---

### üìå 3. Subquery in `FROM` (Derived Table)

```sql
SELECT dept_id, avg_salary
FROM (
  SELECT dept_id, AVG(salary) AS avg_salary
  FROM employees
  GROUP BY dept_id
) AS dept_avg;
```

‚úÖ **Use Case:** Use aggregated data as a table.

---

### üìå 4. Correlated Subquery

```sql
SELECT name
FROM employees e
WHERE salary > (
  SELECT AVG(salary)
  FROM employees
  WHERE dept_id = e.dept_id
);
```

‚úÖ **Use Case:** Compare each employee to their department‚Äôs average.

‚ö†Ô∏è **Note:** Runs once per row ‚Äî can be slow on large datasets.

---

### üìå 5. Subquery with `IN`

```sql
SELECT name
FROM employees
WHERE dept_id IN (
  SELECT dept_id FROM departments WHERE location = 'Chennai'
);
```

‚úÖ **Use Case:** Filter using a list from another table.

---

### üìå 6. Subquery with `EXISTS`

```sql
SELECT name
FROM employees e
WHERE EXISTS (
  SELECT 1 FROM departments d WHERE d.dept_id = e.dept_id AND d.location = 'Chennai'
);
```

‚úÖ **Use Case:** Check if related data exists.

---

### üß† Subquery vs JOIN ‚Äî When to Use

| Use Case | JOIN | Subquery |
|----------|------|----------|
| Combine columns from multiple tables | ‚úÖ Yes | ‚úÖ Yes |
| Filter based on related table | ‚úÖ Yes | ‚úÖ Yes |
| Aggregate then filter | ‚ùå Complex | ‚úÖ Easier with subquery |
| Performance on large data | ‚úÖ Faster | ‚ùå Slower (esp. correlated) |

---
Here‚Äôs a crystal-clear explanation of **Correlated Subqueries in MySQL**, tailored for your GitHub documentation or technical notes:

---

## üîÑ Correlated Subqueries ‚Äî MySQL Cheat Sheet

### ‚úÖ What is a Correlated Subquery?

A **correlated subquery** is a subquery that **depends on the outer query** for its values. It‚Äôs evaluated **once per row** of the outer query ‚Äî unlike regular subqueries, which run once globally.

---

### üìå Syntax Pattern

```sql
SELECT ...
FROM outer_table o
WHERE o.column OPERATOR (
  SELECT ...
  FROM inner_table i
  WHERE i.column = o.column
);
```

---

### üß™ Example: Employees Above Department Average

```sql
SELECT 
  emp_id,
  name,
  salary,
  dept_id
FROM employees e
WHERE salary > (
  SELECT AVG(salary)
  FROM employees
  WHERE dept_id = e.dept_id
);
```

üîç **Explanation:**
- For each employee `e`, the subquery calculates the **average salary of their department**.
- Then it checks if `e.salary` is greater than that average.

---

### ‚ö†Ô∏è Key Characteristics

| Feature | Behavior |
|--------|----------|
| Depends on outer query | ‚úÖ Yes |
| Runs per outer row | ‚úÖ Yes |
| Slower on large datasets | ‚ùå Can be inefficient |
| Useful for row-by-row comparisons | ‚úÖ Yes |
| Can be replaced with JOIN + GROUP BY | ‚úÖ Often better for performance |

---

### üîÅ Performance Tip

If possible, rewrite correlated subqueries using `JOIN` and `GROUP BY` for better performance:

```sql
SELECT e.emp_id, e.name, e.salary, e.dept_id
FROM employees e
JOIN (
  SELECT dept_id, AVG(salary) AS avg_salary
  FROM employees
  GROUP BY dept_id
) d ON e.dept_id = d.dept_id
WHERE e.salary > d.avg_salary;
```

---

Here‚Äôs a complete, example-driven guide to **Subqueries with `EXISTS` in MySQL**, including all major types ‚Äî perfect for your GitHub documentation or technical notes.

---

## üîç Subqueries with `EXISTS` ‚Äî MySQL Cheat Sheet

### ‚úÖ What is `EXISTS`?

`EXISTS` checks whether a **subquery returns any rows**. It returns `TRUE` if **at least one row exists**, and `FALSE` otherwise.

```sql
SELECT ...
FROM outer_table
WHERE EXISTS (
  SELECT ...
  FROM inner_table
  WHERE condition
);
```

---

## üß© Types of `EXISTS` Subqueries

| Type | Description | Use Case | Example |
|------|-------------|----------|---------|
| **Basic EXISTS** | Checks if related data exists | Filter rows with matching foreign keys | Employees with valid departments |
| **Correlated EXISTS** | Subquery depends on outer query | Row-by-row existence check | Employees in Chennai departments |
| **NOT EXISTS** | Checks if no related data exists | Filter rows with no match | Employees without departments |
| **EXISTS with JOIN** | Combines `EXISTS` and `JOIN` logic | Efficient filtering | Customers with orders |
| **EXISTS with Aggregation** | Subquery returns grouped data | Conditional existence of summaries | Departments with >5 employees |

---

### üß™ 1. Basic `EXISTS`

```sql
SELECT name
FROM employees e
WHERE EXISTS (
  SELECT 1 FROM departments d WHERE d.dept_id = e.dept_id
);
```

‚úÖ Returns employees who belong to a valid department.

---

### üîÑ 2. Correlated `EXISTS`

```sql
SELECT name
FROM employees e
WHERE EXISTS (
  SELECT 1 FROM departments d 
  WHERE d.dept_id = e.dept_id AND d.location = 'Chennai'
);
```

‚úÖ Returns employees whose department is in Chennai.

---

### üö´ 3. `NOT EXISTS`

```sql
SELECT name
FROM employees e
WHERE NOT EXISTS (
  SELECT 1 FROM departments d WHERE d.dept_id = e.dept_id
);
```

‚úÖ Returns employees with no matching department ‚Äî useful for orphaned records.

---

### üîó 4. `EXISTS` with `JOIN` Logic

```sql
SELECT c.customer_id, c.name
FROM customers c
WHERE EXISTS (
  SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id
);
```

‚úÖ Returns customers who have placed at least one order.

---

### üìä 5. `EXISTS` with Aggregation

```sql
SELECT dept_id, dept_name
FROM departments d
WHERE EXISTS (
  SELECT 1 FROM employees e 
  WHERE e.dept_id = d.dept_id 
  GROUP BY e.dept_id 
  HAVING COUNT(*) > 5
);
```

‚úÖ Returns departments with more than 5 employees.

---

### ‚ö†Ô∏è Performance Tips

| Tip | Reason |
|-----|--------|
| Use `EXISTS` for existence checks | Faster than `IN` on large datasets |
| Avoid `SELECT *` in subquery | Use `SELECT 1` or `SELECT NULL` |
| Index foreign keys | Speeds up correlated subqueries |
| Prefer `JOIN` for data retrieval | `EXISTS` is for filtering only |

---

Let me know if you‚Äôd like a visual diagram of how `EXISTS` works row-by-row, or a real-world use case like filtering active vendors with recent transactions.
