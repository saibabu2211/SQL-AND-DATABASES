Here‚Äôs a complete, step-by-step guide to **Stored Procedures in MySQL**, Saibabu ‚Äî from fundamentals to advanced features, with practical examples for automation, reporting, and modular logic. This is designed to slot directly into your SQL workbook or cheat sheet.

---

## üßæ 1. What Is a Stored Procedure?

A **stored procedure** is a named block of SQL code saved in the database that performs a task. You can call it with parameters, include control flow, and reuse it across queries.

> ‚úÖ Think of it as a reusable SQL function with inputs, outputs, and logic.

---

## üß† 2. Benefits of Stored Procedures

| Feature         | Benefit                                                                 |
|------------------|-------------------------------------------------------------------------|
| üîÅ Reusability     | Write once, use many times                                              |
| üß© Modularity      | Encapsulate business logic and calculations                            |
| üöÄ Performance     | Precompiled and optimized by MySQL engine                              |
| üîí Security        | Restrict access via GRANT/REVOKE                                       |
| üßæ Maintainability | Centralized logic ‚Äî easier to update and audit                         |

---

## üîß 3. Syntax Overview

```sql
DELIMITER //

CREATE PROCEDURE procedure_name(
  IN param1 datatype,
  OUT param2 datatype,
  INOUT param3 datatype
)
BEGIN
  -- SQL statements
END //

DELIMITER ;
```

- `IN`: input only
- `OUT`: output only
- `INOUT`: input and output
- `DELIMITER //`: separates procedure body from default `;`

---

## ‚úÖ 4. Simple Example: Add Two Numbers

```sql
DELIMITER //

CREATE PROCEDURE AddNumbers(IN a INT, IN b INT, OUT result INT)
BEGIN
  SET result = a + b;
END //

DELIMITER ;

-- Call it
CALL AddNumbers(10, 20, @sum);
SELECT @sum;  -- Output: 30
```

---

## üì¶ 5. Transactional Example: Transfer Money

```sql
DELIMITER //

CREATE PROCEDURE TransferMoney(IN from_id INT, IN to_id INT, IN amount DECIMAL(10,2))
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
  END;

  START TRANSACTION;

  UPDATE accounts SET balance = balance - amount WHERE account_id = from_id;
  UPDATE accounts SET balance = balance + amount WHERE account_id = to_id;

  COMMIT;
END //

DELIMITER ;

-- Call it
CALL TransferMoney(101, 202, 500.00);
```

---

## üìä 6. Reporting Example: Monthly Sales Summary

```sql
DELIMITER //

CREATE PROCEDURE GetMonthlySales(IN month_val INT, IN year_val INT)
BEGIN
  SELECT region, SUM(sales_amount) AS total_sales
  FROM sales
  WHERE MONTH(sale_date) = month_val AND YEAR(sale_date) = year_val
  GROUP BY region;
END //

DELIMITER ;

-- Call it
CALL GetMonthlySales(9, 2025);
```

---

## üßÆ 7. Output Parameter Example: Customer Count

```sql
DELIMITER //

CREATE PROCEDURE GetCustomerCount(IN region_name VARCHAR(50), OUT cust_count INT)
BEGIN
  SELECT COUNT(*) INTO cust_count FROM customers WHERE region = region_name;
END //

DELIMITER ;

-- Call it
CALL GetCustomerCount('South', @total);
SELECT @total;
```

---

## üîÅ 8. Loop Example: Print Numbers 1 to 5

```sql
DELIMITER //

CREATE PROCEDURE PrintNumbers()
BEGIN
  DECLARE i INT DEFAULT 1;

  WHILE i <= 5 DO
    SELECT CONCAT('Number: ', i);
    SET i = i + 1;
  END WHILE;
END //

DELIMITER ;

-- Call it
CALL PrintNumbers();
```

---

## üß† 9. Error Handling

Use `DECLARE HANDLER` to catch exceptions:

```sql
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  ROLLBACK;
END;
```

Types:
- `EXIT`: exits procedure
- `CONTINUE`: continues execution
- `UNDO`: not supported in MySQL

---

## üß© 10. Best Practices

| Practice               | Why It Matters                                |
|------------------------|------------------------------------------------|
| Use transactions       | Ensure atomic updates                          |
| Modularize logic       | Keep procedures focused and reusable           |
| Handle exceptions      | Prevent partial failures                       |
| Use OUT parameters     | Return values cleanly                          |
| Avoid cursors if possible | Prefer set-based operations for performance |

---

Would you like this formatted into a downloadable cheat sheet with editable templates and challenge prompts? I can also add advanced patterns like dynamic SQL, audit logging, and nested procedure calls.
