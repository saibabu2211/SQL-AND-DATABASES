Here‚Äôs a **complete, structured guide to Stored Procedures in SQL** ‚Äî from basics to advanced ‚Äî tailored to your automation, reporting, and modular design goals, Saibabu. This format is cheat-sheet friendly and example-rich for your SQL workbook.

---

## üßæ 1. What Is a Stored Procedure?

A **stored procedure** is a named block of SQL code saved in the database that performs a specific task. It can accept parameters, include control flow, and be reused across queries.

> Think of it as a reusable SQL function that can contain multiple statements, logic, and even transactions.

---

## üß† 2. Why Use Stored Procedures?

| Benefit         | Description                                                                 |
|------------------|------------------------------------------------------------------------------|
| üîÅ Reusability     | Write once, use many times                                                  |
| üß© Modularity      | Encapsulate complex logic for clarity                                       |
| üöÄ Performance     | Precompiled and optimized by the database engine                            |
| üîí Security        | Restrict access via permissions and roles                                   |
| üßæ Maintainability | Centralized logic ‚Äî easier to update and audit                              |

---

## üîß 3. Basic Syntax (SQL Server Style)

```sql
CREATE PROCEDURE procedure_name
  @param1 datatype,
  @param2 datatype
AS
BEGIN
  -- SQL statements
END;
```

To execute:
```sql
EXEC procedure_name @param1 = value1, @param2 = value2;
```

---

## ‚úÖ 4. Scalar Logic Example: Add Two Numbers

```sql
CREATE PROCEDURE AddNumbers
  @a INT,
  @b INT
AS
BEGIN
  PRINT 'Sum = ' + CAST(@a + @b AS VARCHAR);
END;

EXEC AddNumbers @a = 10, @b = 20;
```

---

## üì¶ 5. Transactional Example: Transfer Money

```sql
CREATE PROCEDURE TransferMoney
  @from INT,
  @to INT,
  @amount DECIMAL(10,2)
AS
BEGIN
  BEGIN TRANSACTION;

  UPDATE accounts SET balance = balance - @amount WHERE id = @from;
  UPDATE accounts SET balance = balance + @amount WHERE id = @to;

  IF @@ERROR <> 0
    ROLLBACK;
  ELSE
    COMMIT;
END;
```

**Use case:** Ensures atomic transfer ‚Äî ideal for financial automation.

---

## üìä 6. Reporting Example: Monthly Sales Summary

```sql
CREATE PROCEDURE GetMonthlySales
  @month INT,
  @year INT
AS
BEGIN
  SELECT region, SUM(sales_amount) AS total_sales
  FROM sales
  WHERE MONTH(sale_date) = @month AND YEAR(sale_date) = @year
  GROUP BY region;
END;
```

**Use case:** Dynamic report generation for dashboards or exports.

---

## üßÆ 7. Output Parameters

```sql
CREATE PROCEDURE GetCustomerCount
  @region NVARCHAR(50),
  @count INT OUTPUT
AS
BEGIN
  SELECT @count = COUNT(*) FROM customers WHERE region = @region;
END;

-- Execute
DECLARE @total INT;
EXEC GetCustomerCount @region = 'South', @count = @total OUTPUT;
SELECT @total;
```

---

## üîÅ 8. Control Flow: IF, WHILE, CASE

```sql
CREATE PROCEDURE CheckStock
  @item_id INT
AS
BEGIN
  DECLARE @stock INT;
  SELECT @stock = stock FROM inventory WHERE item_id = @item_id;

  IF @stock < 10
    PRINT 'Low stock';
  ELSE
    PRINT 'Stock sufficient';
END;
```

---

## üîí 9. Error Handling (SQL Server)

```sql
BEGIN TRY
  -- risky operations
END TRY
BEGIN CATCH
  PRINT ERROR_MESSAGE();
END CATCH
```

---

## üß† 10. Advanced Use Cases

| Scenario                    | Description                                      |
|-----------------------------|--------------------------------------------------|
| üßæ Invoice generation        | Loop through items, calculate totals             |
| üìä Dynamic filtering         | Accept filters for region, date, category        |
| üîç Audit logging             | Insert into log table before/after updates       |
| üßÆ Batch processing          | Loop through records with cursor or WHILE        |
| üîÅ Nested procedures         | Call one procedure from another                  |

---

## üßæ 11. BigQuery Stored Procedures (Script-Based)

```sql
CREATE PROCEDURE my_proc()
BEGIN
  DECLARE total INT64;
  SET total = (SELECT COUNT(*) FROM customers);
  SELECT total;
END;
```

**Note:** BigQuery uses scripting ‚Äî no `EXEC`, just `CALL my_proc();`

---

## üß© 12. Stored Procedure vs UDF

| Feature             | Stored Procedure           | User-Defined Function (UDF)       |
|---------------------|----------------------------|-----------------------------------|
| Returns             | None or table              | Scalar or table                   |
| Control Flow        | ‚úÖ Yes (IF, WHILE, etc.)    | ‚ùå Limited                        |
| Transactions        | ‚úÖ Supported                | ‚ùå Not supported                  |
| Use in SELECT       | ‚ùå Not directly             | ‚úÖ Scalar UDFs only               |
| Reusability         | ‚úÖ High                     | ‚úÖ High                           |

---

Would you like this formatted into a modular SQL workbook section with editable templates and challenge prompts? I can also add platform-specific syntax for PostgreSQL, MySQL, and BigQuery.
