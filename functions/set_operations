Hereâ€™s a clear, example-driven guide to **Set Operations in MySQL**, formatted for your GitHub documentation or technical submissions:

---

## ðŸ”— MySQL Set Operations â€” Cheat Sheet

Set operations allow you to **combine results from multiple SELECT queries**. These are useful for merging, comparing, or filtering datasets.

---

### ðŸ§© Supported Set Operators

| Operator | Description | Notes |
|----------|-------------|-------|
| `UNION` | Combines results from two queries, removes duplicates | Requires same number and type of columns |
| `UNION ALL` | Combines results, **keeps duplicates** | Faster than `UNION` |
| `INTERSECT` | Returns rows common to both queries | **Not supported natively** in MySQL (use `INNER JOIN`) |
| `EXCEPT` / `MINUS` | Returns rows from first query **not** in second | **Not supported natively** (use `LEFT JOIN` + `IS NULL`) |

---

### âœ… `UNION` Example

```sql
SELECT city FROM customers
UNION
SELECT city FROM suppliers;
```

**Result:** All unique cities from both tables.

---

### âœ… `UNION ALL` Example

```sql
SELECT city FROM customers
UNION ALL
SELECT city FROM suppliers;
```

**Result:** All cities including duplicates.

---

### ðŸ”„ Simulating `INTERSECT` with `INNER JOIN`

```sql
SELECT c.city
FROM customers c
INNER JOIN suppliers s ON c.city = s.city;
```

**Result:** Cities common to both tables.

---

### ðŸš« Simulating `EXCEPT` with `LEFT JOIN`

```sql
SELECT c.city
FROM customers c
LEFT JOIN suppliers s ON c.city = s.city
WHERE s.city IS NULL;
```

**Result:** Cities in `customers` but not in `suppliers`.

---

Let me know if youâ€™d like a tabular comparison of these operations with performance notes, or a real-world use case like merging employee and contractor lists.
