
### ✅ What is `CASE`?

The `CASE` clause in MySQL is used to apply **conditional logic** inside SQL queries — similar to `if-else` statements in programming.

---

### 📌 Syntax

```sql
CASE
  WHEN condition1 THEN result1
  WHEN condition2 THEN result2
  ...
  ELSE default_result
END
```

You can use it in `SELECT`, `UPDATE`, `ORDER BY`, and even inside `WHERE`.

---

### 🧪 Example: Salary Grade

Suppose you have a table `employees` with a column `monthly_salary`. You want to assign a grade based on salary:

```sql
SELECT 
  emp_id,
  monthly_salary,
  CASE
    WHEN monthly_salary >= 70000 THEN 'A'
    WHEN monthly_salary >= 50000 THEN 'B'
    WHEN monthly_salary >= 30000 THEN 'C'
    ELSE 'D'
  END AS salary_grade
FROM employees;
```

---

### 📋 Output

| emp_id | monthly_salary | salary_grade |
|--------|----------------|--------------|
| 101    | 75000          | A            |
| 102    | 52000          | B            |
| 103    | 45000          | C            |
| 104    | 28000          | D            |

---

### 🔄 Inline `CASE` Example (with `CONCAT`)

```sql
SELECT 
  emp_id,
  CONCAT(first_name, ' ', last_name) AS full_name,
  CASE performance
    WHEN 'excellent' THEN '🌟 Top Performer'
    WHEN 'good' THEN '👍 Solid Contributor'
    ELSE '🔍 Needs Review'
  END AS performance_label
FROM employees;
```

---

Let me know if you’d like to add examples using `CASE` in `UPDATE`, `ORDER BY`, or `WHERE` clauses — or want a cheat sheet for conditional logic across SQL and Python.

| Use Case | Syntax | Example | Output |
|----------|--------|---------|--------|
| **Basic CASE in SELECT** | `CASE WHEN condition THEN result ELSE default END` | `CASE WHEN salary > 70000 THEN 'A' ELSE 'B' END` | `'A'` or `'B'` |
| **Multiple Conditions** | Chain multiple `WHEN` clauses | `CASE WHEN x > 90 THEN 'A' WHEN x > 75 THEN 'B' ELSE 'C' END` | `'A'`, `'B'`, or `'C'` |
| **Column Matching** | `CASE column WHEN value THEN result ...` | `CASE grade WHEN 'A' THEN 'Excellent' WHEN 'B' THEN 'Good' END` | `'Excellent'` |
| **In SELECT Clause** | Used to create derived columns | `SELECT CASE WHEN age < 18 THEN 'Minor' ELSE 'Adult' END AS status` | `'Minor'` or `'Adult'` |
| **In ORDER BY Clause** | Custom sort logic | `ORDER BY CASE WHEN priority = 'High' THEN 1 ELSE 2 END` | High priority rows first |
| **In WHERE Clause** | Conditional filtering | `WHERE CASE WHEN active = 1 THEN TRUE ELSE FALSE END` | Filters active rows |
| **In UPDATE Clause** | Conditional updates | `UPDATE emp SET bonus = CASE WHEN perf = 'A' THEN 1000 ELSE 500 END` | Updates bonus based on performance |

---

### 🔧 Real-World Example: Grading Employees

```sql
SELECT 
  emp_id,
  monthly_salary,
  CASE
    WHEN monthly_salary >= 70000 THEN 'A'
    WHEN monthly_salary >= 50000 THEN 'B'
    WHEN monthly_salary >= 30000 THEN 'C'
    ELSE 'D'
  END AS salary_grade
FROM employees;
```
CASE Clause
SQL provides the CASE clause to perform conditional operations. This is similar to the switch case / if-else conditions in other programming languages.

Let's learn more about the usage of CASE clause using the given database.

Database
The IMDb dataset consists of movies, actors and cast. You can refer to the database in the code playground for a better understanding.


CASE Clause
Each condition in the CASE clause is evaluated and results in corresponding value when the first condition is met.

Syntax
SQL
Note
In the CASE clause, if no condition is satisfied, it returns the value in the ELSE part. If the ELSE part is specified, CASE clause results in NULL.

We can use CASE in various clauses like SELECT, WHERE, HAVING, ORDER BY and GROUP BY.

Example
Calculate the tax amount for all movies based on the profit. Check the following table for tax percentages.

profit	tax_percentage
Less than or equal to 100 crores	10% of profit
Greater than 100 crores and less than or equal to 500 crores	15% of profit
Greater than 500 crores	18% of profit
SQL
 
Output
id	name	profit	tax_amount
1	The Matrix	40.13	4.013
2	Inception	67.68	6.768
3	The Dark Knight	82.5	8.25
...	.....	....	...
...	......	...	....
Try it Yourself
Question 1

Categorise movies as following.

Rating	Category
Less than 5	Poor
Between 5 and 7	Average
Greater than 7	Good
CASE with Aggregates
CASE statements can also be used together with aggregate functions.

Example
SELECT
  COUNT(
    CASE
      WHEN rating >= 8 THEN 1
    END
  ) AS above_eight,
  COUNT(
    CASE
      WHEN rating < 8 THEN 1
    END
  ) AS below_eight
FROM
  movie
WHERE
  CAST(strftime("%Y", release_date) AS INTEGER) BETWEEN 2015 AND 2020;


  
Expand
Output
above_eight	below_eight
4	2
Try it Yourself!
Question 1

Get the number of movies with a collection greater than or equal to 100 crores, and the movies with collection less than 100 crores.
Output
above_100_cr	below_100_cr
13	7
Question 2

For each genre, get the count of movies that had a rating of at least 8.0 and count of movies that had a rating below 8.0.
Output
genre	rating_above_or_equal_8	rating_below_8
Action	7	4
Animation	2	0
Drama	1	2
Mystery	1	1
Sci-fi	2	0
